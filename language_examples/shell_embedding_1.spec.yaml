- source: pkgs
  scopes:
    - variable.other.object.access
    - variable.parameter
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: stdenv
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkDerivation
  scopes:
    - entity.name.function.method.call
- source: '{'
  scopesBegin:
    - meta.punctuation.section.bracket
  scopes:
    - punctuation.section.bracket
- source: buildPhase
  scopesBegin:
    - meta.attribute-set
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: export
  scopesBegin:
    - source.shell
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
  scopes:
    - storage.modifier.export.shell
- source: HOME
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: PWD
  scopes:
    - variable.other.normal.shell
- source: /.
- source: home
  scopes:
    - variable.other.assignment.shell
- source: export
  scopes:
    - storage.modifier.export.shell
- source: npm_config_cache
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: PWD
  scopes:
    - variable.other.normal.shell
- source: /.
- source: npm
  scopes:
    - variable.other.assignment.shell
  scopesEnd:
    - meta.statement.shell
    - meta.expression.assignment.modified.shell
- source: mkdir
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: p
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: $
  scopesBegin:
    - meta.argument.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: out
  scopes:
    - variable.other.normal.shell
- source: /js
  scopes:
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.argument.shell
- source: cd
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: $
  scopesBegin:
    - meta.argument.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: out
  scopes:
    - variable.other.normal.shell
- source: /js
  scopes:
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.argument.shell
- source: cp
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: r
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: $
  scopesBegin:
    - meta.argument.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: src
  scopes:
    - variable.other.normal.shell
- source: /.
  scopesBegin:
    - string.unquoted.argument.shell
- source: .
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: while
  scopes:
    - keyword.control.while.shell
- source: read
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: package
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: do
  scopes:
    - keyword.control.do.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: caching
  scopes:
    - string.unquoted.argument.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: package
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.argument.shell
    - string.quoted.double.shell
- source: npm
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: cache
  scopesBegin:
    - meta.argument.shell
    - string.unquoted.argument.shell
- source: add
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: package
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: done
  scopes:
    - keyword.control.done.shell
- source: ' <'
  scopesEnd:
    - source.shell
- source: '${'
  scopes:
    - punctuation.section.embedded
- source: tarballsFile
  scopes:
    - variable.other.object
    - variable.parameter
- source: '}'
  scopes:
    - punctuation.section.embedded
- source: question
  scopesBegin:
    - source.shell
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: question?
  scopesBegin:
    - string.unquoted.argument.shell
- source: '[y/n]'
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.expression.assignment.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: answer
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.expression.assignment.shell
    - string.quoted.double.shell
- source: while
  scopes:
    - keyword.control.while.shell
- source: 'true'
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: do
  scopes:
    - keyword.control.do.shell
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: question
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: read
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: response
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - meta.statement.command.shell
- source: case
  scopesBegin:
    - meta.case.shell
  scopes:
    - keyword.control.case.shell
- source: '"'
  scopesBegin:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
  scopes:
    - meta.statement.command.name.quoted.shell
    - string.quoted.double.shell
    - punctuation.definition.string.begin.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation.shell
    - string.quoted.double.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: response
  scopes:
    - variable.other.normal.shell
  scopesEnd:
    - meta.statement.command.name.continuation.shell
    - string.quoted.double.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '"'
  scopes:
    - string.quoted.double.shell
    - punctuation.definition.string.end.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
- source: in
  scopes:
    - keyword.control.in.shell
  scopesEnd:
    - meta.case.shell
- source: '['
  scopesBegin:
    - meta.scope.logical-expression.shell
  scopes:
    - punctuation.definition.logical-expression.shell
- source: Yy
- source: ']'
  scopes:
    - punctuation.definition.logical-expression.shell
  scopesEnd:
    - meta.scope.logical-expression.shell
- source: '*'
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: )
- source: answer
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: 'yes'
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.expression.assignment.shell
    - string.quoted.single.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: break
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - keyword.control.break.shell
- source: ;
  scopesBegin:
    - punctuation.terminator.statement.semicolon.shell
- source: ;
  scopesEnd:
    - punctuation.terminator.statement.semicolon.shell
- source: '['
  scopesBegin:
    - meta.scope.logical-expression.shell
  scopes:
    - punctuation.definition.logical-expression.shell
- source: Nn
- source: ']'
  scopes:
    - punctuation.definition.logical-expression.shell
  scopesEnd:
    - meta.scope.logical-expression.shell
- source: '*'
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: )
- source: answer
  scopesBegin:
    - meta.expression.assignment.shell
  scopes:
    - variable.other.assignment.shell
- source: '='
  scopes:
    - keyword.operator.assignment.shell
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: 'no'
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.expression.assignment.shell
    - string.quoted.single.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: break
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - keyword.control.break.shell
- source: ;
  scopesBegin:
    - punctuation.terminator.statement.semicolon.shell
- source: ;
  scopesEnd:
    - punctuation.terminator.statement.semicolon.shell
- source: '*'
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: )
- source: echo
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
    - support.function.builtin.shell
- source: '"'
  scopesBegin:
    - meta.argument.shell
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: Please
  scopesBegin:
    - string.unquoted.argument.shell
- source: answer
- source: 'yes'
- source: or
- source: no.
  scopesEnd:
    - string.unquoted.argument.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - meta.statement.command.shell
    - meta.argument.shell
    - string.quoted.double.shell
- source: ;
  scopesBegin:
    - punctuation.terminator.statement.semicolon.shell
- source: ;
  scopesEnd:
    - punctuation.terminator.statement.semicolon.shell
- source: esac
  scopes:
    - keyword.control.esac.shell
- source: done
  scopes:
    - keyword.control.done.shell
- source: if
  scopes:
    - keyword.control.if.shell
- source: '['
  scopesBegin:
    - meta.scope.logical-expression.shell
  scopes:
    - punctuation.definition.logical-expression.shell
- source: '"'
  scopesBegin:
    - string.quoted.double.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: answer
  scopes:
    - variable.other.normal.shell
- source: '"'
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.double.shell
- source: ' = '
- source: ''''
  scopesBegin:
    - string.quoted.single.shell
  scopes:
    - punctuation.definition.string.begin.shell
- source: 'yes'
- source: ''''
  scopes:
    - punctuation.definition.string.end.shell
  scopesEnd:
    - string.quoted.single.shell
- source: ']'
  scopes:
    - punctuation.definition.logical-expression.shell
  scopesEnd:
    - meta.scope.logical-expression.shell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon.shell
- source: then
  scopes:
    - keyword.control.then.shell
- source: do_something
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: else
  scopes:
    - keyword.control.else.shell
- source: do_something_else
  scopes:
    - meta.statement.command.shell
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: fi
  scopes:
    - keyword.control.fi.shell
- source: npm
  scopesBegin:
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: ci
  scopes:
    - meta.argument.shell
    - string.unquoted.argument.shell
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: installPhase
  scopesBegin:
    - meta.assignment-start
  scopes:
    - meta.attribute-key
    - entity.other.attribute-name
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment-start
- source: ''''''
  scopesBegin:
    - string.quoted.other.shell
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
- source: ln
  scopesBegin:
    - source.shell
    - meta.statement.command.shell
  scopes:
    - meta.statement.command.name.shell
    - entity.name.function.call.shell
    - entity.name.command.shell
- source: '-'
  scopesBegin:
    - string.unquoted.argument.shell
  scopes:
    - constant.other.option.dash.shell
- source: s
  scopes:
    - constant.other.option.shell
  scopesEnd:
    - string.unquoted.argument.shell
- source: $
  scopesBegin:
    - meta.argument.shell
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: out
  scopes:
    - variable.other.normal.shell
- source: /js/node_modules/.bin
  scopes:
    - string.unquoted.argument.shell
- source: $
  scopes:
    - punctuation.definition.variable.shell
    - variable.other.normal.shell.shell
- source: out
  scopes:
    - variable.other.normal.shell
- source: /bin
  scopes:
    - string.unquoted.argument.shell
  scopesEnd:
    - source.shell
    - meta.statement.command.shell
    - meta.argument.shell
- source: ''''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.other.shell
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.bracket
