- source: '{ '
- source: config
  scopes:
    - variable.other
- source: ', '
- source: options
  scopes:
    - variable.other
- source: ', '
- source: lib
  scopes:
    - variable.other
- source: ', '
- source: pkgs
  scopes:
    - variable.other
- source: ', ... }:'
- source: with
  scopesBegin:
    - variable.other
- source: lib
  scopesEnd:
    - variable.other
- source: ;
- source: let
  scopesBegin:
    - variable.other
- source: cfg
  scopesEnd:
    - variable.other
- source: ' = '
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: opt
  scopes:
    - variable.other
- source: ' = '
- source: options
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: isConfig
  scopes:
    - variable.other
- source: ' = '
- source: x
  scopes:
    - variable.other
- source: ':'
- source: builtins
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: x
  scopes:
    - variable.other
- source: ' || '
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: x
  scopes:
    - variable.other
- source: ;
- source: optCall
  scopes:
    - variable.other
- source: ' = '
- source: f
  scopes:
    - variable.other
- source: ': '
- source: x
  scopes:
    - variable.other
- source: ':'
- source: if
  scopes:
    - variable.other
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: f
  scopesBegin:
    - variable.other
- source: then
- source: f
- source: x
- source: else
- source: f
  scopesEnd:
    - variable.other
- source: ;
- source: mergeConfig
  scopes:
    - variable.other
- source: ' = '
- source: lhs_
  scopes:
    - variable.other
- source: ': '
- source: rhs_
  scopes:
    - variable.other
- source: ':'
- source: let
  scopesBegin:
    - variable.other
- source: lhs
  scopesEnd:
    - variable.other
- source: ' = '
- source: optCall
  scopesBegin:
    - variable.other
- source: lhs_
  scopesEnd:
    - variable.other
- source: ' { '
- source: inherit
  scopesBegin:
    - variable.other
- source: pkgs
  scopesEnd:
    - variable.other
- source: '; };'
- source: rhs
  scopes:
    - variable.other
- source: ' = '
- source: optCall
  scopesBegin:
    - variable.other
- source: rhs_
  scopesEnd:
    - variable.other
- source: ' { '
- source: inherit
  scopesBegin:
    - variable.other
- source: pkgs
  scopesEnd:
    - variable.other
- source: '; };'
- source: in
  scopesBegin:
    - variable.other
- source: recursiveUpdate
- source: lhs
- source: rhs
  scopesEnd:
    - variable.other
- source: ' //'
- source: optionalAttrs
  scopes:
    - variable.other
- source: ' ('
- source: lhs
  scopes:
    - variable.other
- source: ' ? '
- source: packageOverrides
  scopes:
    - variable.other
- source: ') {'
- source: packageOverrides
  scopes:
    - variable.other
- source: ' = '
- source: pkgs
  scopes:
    - variable.other
- source: ':'
- source: optCall
  scopes:
    - variable.other
- source: lhs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: packageOverrides
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: pkgs
  scopes:
    - variable.other
- source: ' //'
- source: optCall
  scopes:
    - variable.other
- source: ' ('
- source: attrByPath
  scopes:
    - variable.other
- source: ' ['
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: packageOverrides
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '] ('
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ') '
- source: rhs
  scopes:
    - variable.other
- source: ') '
- source: pkgs
  scopes:
    - variable.other
- source: ;
- source: '    } //'
- source: optionalAttrs
  scopes:
    - variable.other
- source: ' ('
- source: lhs
  scopes:
    - variable.other
- source: ' ? '
- source: perlPackageOverrides
  scopes:
    - variable.other
- source: ') {'
- source: perlPackageOverrides
  scopes:
    - variable.other
- source: ' = '
- source: pkgs
  scopes:
    - variable.other
- source: ':'
- source: optCall
  scopes:
    - variable.other
- source: lhs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: perlPackageOverrides
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: pkgs
  scopes:
    - variable.other
- source: ' //'
- source: optCall
  scopes:
    - variable.other
- source: ' ('
- source: attrByPath
  scopes:
    - variable.other
- source: ' ['
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: perlPackageOverrides
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '] ('
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ') '
- source: rhs
  scopes:
    - variable.other
- source: ') '
- source: pkgs
  scopes:
    - variable.other
- source: ;
- source: '    };'
- source: configType
  scopes:
    - variable.other
- source: ' = '
- source: mkOptionType
  scopes:
    - variable.other
- source: ' {'
- source: name
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs-config
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs config
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: check
  scopes:
    - variable.other
- source: ' = '
- source: x
  scopes:
    - variable.other
- source: ':'
- source: let
  scopesBegin:
    - variable.other
- source: traceXIfNot
  scopesEnd:
    - variable.other
- source: ' = '
- source: c
  scopes:
    - variable.other
- source: ':'
- source: if
  scopesBegin:
    - variable.other
- source: c
- source: x
- source: then
  scopesEnd:
    - variable.other
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: else
  scopes:
    - variable.other
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: traceSeqN
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: '1'
  scopes:
    - constant.numeric.integer
- source: x
  scopes:
    - variable.other
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ;
- source: in
  scopesBegin:
    - variable.other
- source: traceXIfNot
- source: isConfig
  scopesEnd:
    - variable.other
- source: ;
- source: merge
  scopes:
    - variable.other
- source: ' = '
- source: args
  scopes:
    - variable.other
- source: ': '
- source: foldr
  scopes:
    - variable.other
- source: ' ('
- source: def
  scopes:
    - variable.other
- source: ': '
- source: mergeConfig
  scopes:
    - variable.other
- source: def
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: )
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ;
- source: '  };'
- source: overlayType
  scopes:
    - variable.other
- source: ' = '
- source: mkOptionType
  scopes:
    - variable.other
- source: ' {'
- source: name
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs-overlay
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs overlay
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: check
  scopes:
    - variable.other
- source: ' = '
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isFunction
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: merge
  scopes:
    - variable.other
- source: ' = '
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mergeOneOption
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: '  };'
- source: pkgsType
  scopes:
    - variable.other
- source: ' = '
- source: mkOptionType
  scopes:
    - variable.other
- source: ' {'
- source: name
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: An evaluation of Nixpkgs; the top level attribute set of packages
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: check
  scopes:
    - variable.other
- source: ' = '
- source: builtins
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isAttrs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: '  };'
- source: defaultPkgs
  scopes:
    - variable.other
- source: ' = '
- source: import
  scopes:
    - variable.other
- source: ..
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
  scopes:
    - punctuation.other.relative
- source: /
  scopes:
    - punctuation.other.path
- source: ..
  scopes:
    - punctuation.other.relative
- source: /
  scopes:
    - punctuation.other.path
- source: ..
  scopes:
    - punctuation.other.relative
  scopesEnd:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
- source: ' {'
- source: inherit
  scopes:
    - variable.other
- source: ' ('
- source: cfg
  scopes:
    - variable.other
- source: ') '
- source: config
  scopesBegin:
    - variable.other
- source: overlays
- source: localSystem
- source: crossSystem
  scopesEnd:
    - variable.other
- source: ;
- source: '  };'
- source: finalPkgs
  scopes:
    - variable.other
- source: ' = '
- source: if
  scopes:
    - variable.other
- source: opt
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: isDefined
  scopesBegin:
    - variable.other
- source: then
  scopesEnd:
    - variable.other
- source: cfg
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: appendOverlays
  scopes:
    - variable.other
- source: cfg
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: overlays
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: else
  scopesBegin:
    - variable.other
- source: defaultPkgs
  scopesEnd:
    - variable.other
- source: ;
- source: in
  scopes:
    - variable.other
- source: '{'
- source: imports
  scopes:
    - variable.other
- source: ' = ['
- source: .
  scopesBegin:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
  scopes:
    - punctuation.other.relative
- source: /
  scopes:
    - punctuation.other.path
- source: assertions.nix
- source: .
  scopes:
    - punctuation.other.relative
- source: /
  scopes:
    - punctuation.other.path
- source: meta.nix
  scopesEnd:
    - string.unquoted.path
    - punctuation.section.regexp
    - punctuation.section.path
- source: '  ];'
- source: options
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' = {'
- source: pkgs
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: defaultText
  scopes:
    - variable.other
- source: ' = '
- source: literalExpression
  scopes:
    - variable.other
- source: ' '''''
- source: import
  scopes:
    - variable.other
- source: ' "''''${'
- source: nixos
  scopes:
    - variable.other
- source: '}/.." {'
- source: inherit
  scopes:
    - variable.other
- source: ' ('
- source: cfg
  scopes:
    - variable.other
- source: ') '
- source: config
  scopesBegin:
    - variable.other
- source: overlays
- source: localSystem
- source: crossSystem
  scopesEnd:
    - variable.other
- source: ;
- source: '        }'
- source: '      '''';'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: pkgsType
  scopes:
    - variable.other
- source: ;
- source: example
  scopes:
    - variable.other
- source: ' = '
- source: literalExpression
  scopes:
    - variable.other
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: 'import <nixpkgs> {}'
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: If
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: ', '
- source: the
  scopesBegin:
    - variable.other
- source: pkgs
- source: argument
- source: to
- source: all
- source: NixOS
- source: modules
- source: is
- source: the
- source: value
- source: of
- source: this
- source: option
  scopesEnd:
    - variable.other
- source: ', '
- source: extended
  scopesBegin:
    - variable.other
- source: with
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: overlays
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '>, '
- source: if
  scopesBegin:
    - variable.other
- source: that
- source: is
- source: also
  scopesEnd:
    - variable.other
- source: set
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Either
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: crossSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: or
  scopes:
    - variable.other
- source: '        <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: will
  scopesBegin:
    - variable.other
- source: be
- source: used
- source: in
- source: an
- source: assertion
- source: to
- source: check
- source: that
- source: the
- source: NixOS
- source: and
- source: Nixpkgs
- source: architectures
  scopesEnd:
    - variable.other
- source: match
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Any
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: other
  scopesBegin:
    - variable.other
- source: options
- source: in
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other
- source: .*</
- source: code
  scopes:
    - variable.other
- source: '>, '
- source: notably
  scopes:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: config
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '>,'
- source: will
  scopesBegin:
    - variable.other
- source: be
- source: ignored
  scopesEnd:
    - variable.other
- source: .
- source: If
  scopesBegin:
    - variable.other
- source: unset
  scopesEnd:
    - variable.other
- source: ', '
- source: the
  scopesBegin:
    - variable.other
- source: pkgs
- source: argument
- source: to
- source: all
- source: NixOS
- source: modules
- source: is
- source: determined
- source: as
- source: shown
- source: in
- source: the
- source: default
- source: value
- source: for
- source: this
- source: option
  scopesEnd:
    - variable.other
- source: .
- source: The
  scopesBegin:
    - variable.other
- source: default
- source: value
- source: imports
- source: the
- source: Nixpkgs
- source: source
- source: files
- source: relative
- source: to
- source: the
- source: location
- source: of
- source: this
- source: NixOS
- source: module
  scopesEnd:
    - variable.other
- source: ', '
- source: because
  scopesBegin:
    - variable.other
- source: NixOS
- source: and
- source: Nixpkgs
- source: are
- source: distributed
- source: together
- source: for
- source: consistency
  scopesEnd:
    - variable.other
- source: ','
- source: so
  scopesBegin:
    - variable.other
- source: the
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixos
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: in
  scopesBegin:
    - variable.other
- source: the
- source: default
- source: value
- source: is
- source: in
- source: fact
- source: a
- source: relative
  scopesEnd:
    - variable.other
- source: path
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: The
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: config
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '>, <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: overlays
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '>,'
- source: '        <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: localSystem
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '>, '
- source: and
  scopes:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: crossSystem
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: come
  scopesBegin:
    - variable.other
- source: from
- source: this
- source: option's
- source: siblings
  scopesEnd:
    - variable.other
- source: .
- source: This
  scopesBegin:
    - variable.other
- source: option
- source: can
- source: be
- source: used
- source: by
- source: applications
- source: like
- source: NixOps
- source: to
- source: increase
- source: the
- source: performance
- source: of
- source: evaluation
  scopesEnd:
    - variable.other
- source: ', '
- source: or
  scopesBegin:
    - variable.other
- source: to
- source: create
- source: packages
- source: that
- source: depend
- source: 'on'
- source: a
- source: container
- source: that
- source: should
- source: be
- source: built
- source: with
- source: the
- source: exact
- source: same
- source: evaluation
- source: of
- source: Nixpkgs
  scopesEnd:
    - variable.other
- source: ', '
- source: for
  scopes:
    - variable.other
- source: example
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Applications
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: like
  scopesBegin:
    - variable.other
- source: this
- source: should
- source: set
- source: their
- source: default
- source: value
- source: using
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkDefault
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '>, '
- source: so
  scopesBegin:
    - variable.other
- source: user-provided
- source: configuration
- source: can
- source: override
- source: it
- source: without
- source: using
  scopesEnd:
    - variable.other
- source: '        <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: lib
  scopes:
    - variable.other
- source: </
- source: code
  scopes:
    - variable.other
- source: '>.'
- source: Note
  scopesBegin:
    - variable.other
- source: that
- source: using
- source: a
- source: distinct
- source: version
- source: of
- source: Nixpkgs
- source: with
- source: NixOS
- source: may
- source: be
- source: an
- source: unexpected
- source: source
- source: of
  scopesEnd:
    - variable.other
- source: problems
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Use
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: this
  scopesBegin:
    - variable.other
- source: option
- source: with
- source: care
  scopesEnd:
    - variable.other
- source: .
- source: '      '''';'
- source: '    };'
- source: config
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: default
  scopes:
    - variable.other
- source: ' ='
- source: '{'
  scopesBegin:
    - punctuation.definition.dict
- source: '}'
  scopesEnd:
    - punctuation.definition.dict
- source: ;
- source: example
  scopes:
    - variable.other
- source: ' = '
- source: literalExpression
  scopes:
    - variable.other
- source: '        '''''
- source: '          { '
- source: allowBroken
  scopes:
    - variable.other
- source: ' = '
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: '; '
- source: allowUnfree
  scopes:
    - variable.other
- source: ' = '
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: '; }'
- source: '        '''';'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: configType
  scopes:
    - variable.other
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: The
  scopesBegin:
    - variable.other
- source: configuration
- source: of
- source: the
- source: Nix
- source: Packages
- source: collection
  scopesEnd:
    - variable.other
- source: .  (
- source: For
  scopesBegin:
    - variable.other
- source: details
  scopesEnd:
    - variable.other
- source: ', '
- source: see
  scopesBegin:
    - variable.other
- source: the
- source: Nixpkgs
- source: documentation
  scopesEnd:
    - variable.other
- source: '.)  '
- source: It
  scopesBegin:
    - variable.other
- source: allows
- source: you
- source: to
- source: set
- source: package
- source: configuration
- source: options
  scopesEnd:
    - variable.other
- source: .
- source: Ignored
  scopesBegin:
    - variable.other
- source: when
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: .
- source: '      '''';'
- source: '    };'
- source: overlays
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: default
  scopes:
    - variable.other
- source: ' ='
- source: '['
  scopesBegin:
    - punctuation.definition.list
- source: ']'
  scopesEnd:
    - punctuation.definition.list
- source: ;
- source: example
  scopes:
    - variable.other
- source: ' = '
- source: literalExpression
  scopes:
    - variable.other
- source: '        '''''
- source: '          ['
- source: '            ('
- source: self
  scopes:
    - variable.other
- source: ': '
- source: super
  scopes:
    - variable.other
- source: ': {'
- source: openssh
  scopes:
    - variable.other
- source: ' = '
- source: super
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: openssh
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: override
  scopes:
    - variable.other
- source: ' {'
- source: hpnSupport
  scopes:
    - variable.other
- source: ' = '
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
- source: kerberos
  scopes:
    - variable.other
- source: ' = '
- source: self
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: libkrb5
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: '              };'
- source: '            })'
- source: '          ]'
- source: '        '''';'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listOf
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: overlayType
  scopes:
    - variable.other
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: List
  scopesBegin:
    - variable.other
- source: of
- source: overlays
- source: to
- source: use
- source: with
- source: the
- source: Nix
- source: Packages
- source: collection
  scopesEnd:
    - variable.other
- source: .
- source: '        ('
- source: For
  scopesBegin:
    - variable.other
- source: details
  scopesEnd:
    - variable.other
- source: ', '
- source: see
  scopesBegin:
    - variable.other
- source: the
- source: Nixpkgs
- source: documentation
  scopesEnd:
    - variable.other
- source: '.)  '
- source: It
  scopesBegin:
    - variable.other
- source: allows
- source: you
- source: to
- source: override
- source: packages
  scopesEnd:
    - variable.other
- source: globally
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Each
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: function
  scopesBegin:
    - variable.other
- source: in
- source: the
- source: list
- source: takes
- source: as
- source: an
- source: argument
- source: the
  scopesEnd:
    - variable.other
- source: ' <'
- source: emphasis
  scopes:
    - variable.other
- source: '>'
- source: original
  scopes:
    - variable.other
- source: </
- source: emphasis
  scopes:
    - variable.other
- source: '> '
- source: Nixpkgs
  scopes:
    - variable.other
- source: .
- source: The
  scopesBegin:
    - variable.other
- source: first
- source: argument
- source: should
- source: be
- source: used
- source: for
- source: finding
- source: dependencies
  scopesEnd:
    - variable.other
- source: ', '
- source: and
  scopesBegin:
    - variable.other
- source: the
- source: second
- source: should
- source: be
- source: used
- source: for
- source: overriding
- source: recipes
  scopesEnd:
    - variable.other
- source: .
- source: If
  scopes:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: ', '
- source: overlays
  scopesBegin:
    - variable.other
- source: specified
- source: here
- source: will
- source: be
- source: applied
- source: after
- source: the
- source: overlays
- source: that
- source: were
- source: already
- source: present
- source: in
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '>.'
- source: '      '''';'
- source: '    };'
- source: localSystem
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO utilize lib.systems.parsedPlatform'
  scopes:
    - comment.line
- source: default
  scopes:
    - variable.other
- source: ' = { '
- source: inherit
  scopes:
    - variable.other
- source: ' ('
- source: cfg
  scopes:
    - variable.other
- source: ') '
- source: system
  scopes:
    - variable.other
- source: '; };'
- source: example
  scopes:
    - variable.other
- source: ' = { '
- source: system
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: aarch64-linux
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '; '
- source: config
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: aarch64-unknown-linux-gnu
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '; };'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Make sure that the final value has all fields for sake of other modules'
  scopes:
    - comment.line
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' referring to this. TODO make `lib.systems` itself use the module system.'
  scopes:
    - comment.line
- source: apply
  scopes:
    - variable.other
- source: ' = '
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: systems
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: elaborate
  scopes:
    - variable.other
- source: ;
- source: defaultText
  scopes:
    - variable.other
- source: ' = '
- source: literalExpression
  scopes:
    - variable.other
- source: ''''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.single
- source: (import "
- source: '''''$'
  scopes:
    - constant.character.escape
- source: '{nixos}/../lib").lib.systems.examples.aarch64-multiplatform'
- source: ''''''
  scopes:
    - punctuation.definition.string.single
  scopesEnd:
    - string.quoted.single
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: Specifies
  scopesBegin:
    - variable.other
- source: the
- source: platform
- source: 'on'
- source: which
- source: NixOS
- source: should
- source: be
  scopesEnd:
    - variable.other
- source: built
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: When
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: '        <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: crossSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: unset
  scopesEnd:
    - variable.other
- source: ', '
- source: it
  scopesBegin:
    - variable.other
- source: also
- source: specifies
- source: the
- source: platform
  scopesEnd:
    - variable.other
- source: ' <'
- source: emphasis
  scopes:
    - variable.other
- source: '>'
- source: for
  scopes:
    - variable.other
- source: </
- source: emphasis
  scopes:
    - variable.other
- source: '> '
- source: which
  scopesBegin:
    - variable.other
- source: NixOS
- source: should
- source: be
  scopesEnd:
    - variable.other
- source: built
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: If
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: this
  scopesBegin:
    - variable.other
- source: option
- source: is
- source: unset
  scopesEnd:
    - variable.other
- source: ', '
- source: it
  scopesBegin:
    - variable.other
- source: defaults
- source: to
- source: the
- source: platform
- source: type
- source: of
- source: the
- source: machine
- source: where
- source: evaluation
  scopesEnd:
    - variable.other
- source: happens
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Specifying
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: this
  scopesBegin:
    - variable.other
- source: option
- source: is
- source: useful
- source: when
- source: doing
- source: distributed
- source: multi-platform
- source: deployment
  scopesEnd:
    - variable.other
- source: ', '
- source: or
  scopesBegin:
    - variable.other
- source: when
- source: building
- source: virtual
  scopesEnd:
    - variable.other
- source: machines
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: See
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: its
  scopesBegin:
    - variable.other
- source: description
- source: in
- source: the
- source: Nixpkgs
- source: manual
- source: for
- source: more
- source: details
  scopesEnd:
    - variable.other
- source: .
- source: Ignored
  scopesBegin:
    - variable.other
- source: when
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: .
- source: '      '''';'
- source: '    };'
- source: crossSystem
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nullOr
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO utilize lib.systems.parsedPlatform'
  scopes:
    - comment.line
- source: default
  scopes:
    - variable.other
- source: ' = '
- source: 'null'
  scopes:
    - constant.language.null
- source: ;
- source: example
  scopes:
    - variable.other
- source: ' = { '
- source: system
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: aarch64-linux
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '; '
- source: config
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: aarch64-unknown-linux-gnu
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: '; };'
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: Specifies
  scopesBegin:
    - variable.other
- source: the
- source: platform
- source: for
- source: which
- source: NixOS
- source: should
- source: be
  scopesEnd:
    - variable.other
- source: built
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Specify
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: this
  scopesBegin:
    - variable.other
- source: only
- source: if
- source: it
- source: is
- source: different
- source: from
  scopesEnd:
    - variable.other
- source: '        <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '>, '
- source: the
  scopesBegin:
    - variable.other
- source: platform
  scopesEnd:
    - variable.other
- source: '        <'
- source: emphasis
  scopes:
    - variable.other
- source: '>'
- source: 'on'
  scopes:
    - variable.other
- source: </
- source: emphasis
  scopes:
    - variable.other
- source: '> '
- source: which
  scopesBegin:
    - variable.other
- source: NixOS
- source: should
- source: be
  scopesEnd:
    - variable.other
- source: built
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: In
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: other
  scopesBegin:
    - variable.other
- source: words
  scopesEnd:
    - variable.other
- source: ', '
- source: specify
  scopesBegin:
    - variable.other
- source: this
- source: to
- source: cross-compile
  scopesEnd:
    - variable.other
- source: NixOS
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Otherwise
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: it
  scopesBegin:
    - variable.other
- source: should
- source: be
- source: set
- source: as
  scopesEnd:
    - variable.other
- source: 'null'
  scopes:
    - constant.language.null
- source: ', '
- source: the
  scopes:
    - variable.other
- source: default
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: See
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: its
  scopesBegin:
    - variable.other
- source: description
- source: in
- source: the
- source: Nixpkgs
- source: manual
- source: for
- source: more
- source: details
  scopesEnd:
    - variable.other
- source: .
- source: Ignored
  scopesBegin:
    - variable.other
- source: when
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: .
- source: '      '''';'
- source: '    };'
- source: system
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: example
  scopes:
    - variable.other
- source: ' = '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: i686-linux
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: Specifies
  scopesBegin:
    - variable.other
- source: the
- source: Nix
- source: platform
- source: type
- source: 'on'
- source: which
- source: NixOS
- source: should
- source: be
- source: built
  scopesEnd:
    - variable.other
- source: .
- source: It
  scopesBegin:
    - variable.other
- source: is
- source: better
- source: to
- source: specify
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: instead
  scopes:
    - variable.other
- source: .
- source: '        <'
- source: programlisting
  scopes:
    - variable.other
- source: '>'
- source: '        {'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: system
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' = ..;'
- source: '        }'
- source: '        </'
- source: programlisting
  scopes:
    - variable.other
- source: '>'
- source: is
  scopesBegin:
    - variable.other
- source: the
- source: same
- source: as
  scopesEnd:
    - variable.other
- source: '        <'
- source: programlisting
  scopes:
    - variable.other
- source: '>'
- source: '        {'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: system
  scopes:
    - variable.other
- source: ' = ..;'
- source: '        }'
- source: '        </'
- source: programlisting
  scopes:
    - variable.other
- source: '>'
- source: See
  scopes:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: for
  scopesBegin:
    - variable.other
- source: more
- source: information
  scopesEnd:
    - variable.other
- source: .
- source: Ignored
  scopesBegin:
    - variable.other
- source: when
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: localSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: .
- source: Ignored
  scopesBegin:
    - variable.other
- source: when
  scopesEnd:
    - variable.other
- source: ' <'
- source: code
  scopes:
    - variable.other
- source: '>'
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: code
  scopes:
    - variable.other
- source: '> '
- source: is
  scopesBegin:
    - variable.other
- source: set
  scopesEnd:
    - variable.other
- source: .
- source: '      '''';'
- source: '    };'
- source: initialSystem
  scopes:
    - variable.other
- source: ' = '
- source: mkOption
  scopes:
    - variable.other
- source: ' {'
- source: type
  scopes:
    - variable.other
- source: ' = '
- source: types
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: internal
  scopes:
    - variable.other
- source: ' = '
- source: 'true'
  scopes:
    - constant.language.boolean.true
- source: ;
- source: description
  scopes:
    - variable.other
- source: ' = '''''
- source: Preserved
  scopesBegin:
    - variable.other
- source: value
- source: of
  scopesEnd:
    - variable.other
- source: ' <'
- source: literal
  scopes:
    - variable.other
- source: '>'
- source: system
  scopes:
    - variable.other
- source: </
- source: literal
  scopes:
    - variable.other
- source: '> '
- source: passed
  scopesBegin:
    - variable.other
- source: to
  scopesEnd:
    - variable.other
- source: ' <'
- source: literal
  scopes:
    - variable.other
- source: '>'
- source: eval-config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nix
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: </
- source: literal
  scopes:
    - variable.other
- source: '>.'
- source: '      '''';'
- source: '    };'
- source: '  };'
- source: config
  scopes:
    - variable.other
- source: ' = {'
- source: _module
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: args
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' = {'
- source: pkgs
  scopes:
    - variable.other
- source: ' = '
- source: finalPkgs
  scopes:
    - variable.other
- source: ;
- source: '    };'
- source: assertions
  scopes:
    - variable.other
- source: ' = ['
- source: '      ('
- source: let
  scopesBegin:
    - variable.other
- source: nixosExpectedSystem
  scopesEnd:
    - variable.other
- source: ' ='
- source: if
  scopes:
    - variable.other
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: crossSystem
  scopes:
    - variable.other
- source: ' != '
- source: 'null'
  scopes:
    - constant.language.null
- source: then
  scopes:
    - variable.other
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: crossSystem
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: system
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: or
  scopes:
    - variable.other
- source: ' ('
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: systems
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: parse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: doubleFromSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' ('
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: systems
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: parse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkSystemFromString
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: crossSystem
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ))
- source: else
  scopes:
    - variable.other
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: localSystem
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: system
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: or
  scopes:
    - variable.other
- source: ' ('
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: systems
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: parse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: doubleFromSystem
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' ('
- source: lib
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: systems
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: parse
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkSystemFromString
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: localSystem
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: config
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ));
- source: nixosOption
  scopes:
    - variable.other
- source: ' ='
- source: if
  scopes:
    - variable.other
- source: config
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: nixpkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: crossSystem
  scopes:
    - variable.other
- source: ' != '
- source: 'null'
  scopes:
    - constant.language.null
- source: then
  scopes:
    - variable.other
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs.crossSystem
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: else
  scopes:
    - variable.other
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.double
- source: nixpkgs.localSystem
- source: '"'
  scopes:
    - punctuation.definition.string.double
  scopesEnd:
    - string.quoted.double
- source: ;
- source: pkgsSystem
  scopes:
    - variable.other
- source: ' = '
- source: finalPkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: stdenv
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: .
- source: targetPlatform
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: system
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ;
- source: in
  scopes:
    - variable.other
- source: ' {'
- source: assertion
  scopes:
    - variable.other
- source: ' = '
- source: nixosExpectedSystem
  scopes:
    - variable.other
- source: ' == '
- source: pkgsSystem
  scopes:
    - variable.other
- source: ;
- source: message
  scopes:
    - variable.other
- source: ' = "'
- source: The
  scopesBegin:
    - variable.other
- source: NixOS
  scopesEnd:
    - variable.other
- source: nixpkgs
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pkgs
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: option
  scopesBegin:
    - variable.other
- source: was
- source: set
- source: to
- source: a
- source: Nixpkgs
- source: invocation
- source: that
- source: compiles
- source: to
- source: target
- source: system
  scopesEnd:
    - variable.other
- source: ' ${'
- source: pkgsSystem
  scopes:
    - variable.other
- source: '} '
- source: but
  scopesBegin:
    - variable.other
- source: NixOS
- source: was
- source: configured
- source: for
- source: system
  scopesEnd:
    - variable.other
- source: ' ${'
- source: nixosExpectedSystem
  scopes:
    - variable.other
- source: '} '
- source: via
  scopesBegin:
    - variable.other
- source: NixOS
- source: option
  scopesEnd:
    - variable.other
- source: ' ${'
- source: nixosOption
  scopes:
    - variable.other
- source: '}. '
- source: The
  scopesBegin:
    - variable.other
- source: NixOS
- source: system
- source: settings
- source: must
- source: match
- source: the
- source: Nixpkgs
- source: target
- source: system
  scopesEnd:
    - variable.other
- source: .";
- source: '        }'
- source: '      )'
- source: '    ];'
- source: '  };'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' needs a full nixpkgs path to import nixpkgs'
  scopes:
    - comment.line
- source: meta
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildDocsInSandbox
  scopes:
    - variable.other.property
    - variable.other.object.property
- source: ' = '
- source: 'false'
  scopes:
    - constant.language.boolean.false
- source: ;
- source: '}'
